#!/usr/bin/env python

DESCRIPTION = """
GraphProt:

Explicit Decomposition with Neighborhood (EDeN) utility program for 
sequence-based modeling of binding preferences of RNA-binding proteins.
"""

EPILOG = """
Author: Daniel Maticzka
Copyright: 2015
License: GPL
Maintainer: Daniel Maticzka
Email: maticzkd@informatik.uni-freiburg.de
Status: Development

Please cite:

    Daniel Maticzka, Sita J. Lange, Fabrizio Costa, Rolf Backofen
    GraphProt: modeling binding preferences of RNA-binding proteins
    Genome Biology, 2014, 15(1), R17
"""

from eden.model_base import *

class ModelInitializer(ModelInitializerBase):

    def load_data(self, input_file):
        """Load sequence tuples from file."""
        from eden.converter.fasta import fasta_to_sequence
        seqs = fasta_to_sequence(input_file)
        return seqs

    def load_positive_data(self, args):
        """Load positive class data from file."""
        return self.load_data(args.positive_input_file)

    def load_negative_data(self, args):
        """Load negative class data from file."""
        return self.load_data(args.negative_input_file)

    def pre_processor_init(self, n_iter):
        """Setup conversion of sequence tuples to graphs."""
        def pre_processor(seqs, **args):
            """Convert sequence tuples to graphs."""
            from eden.converter.fasta import sequence_to_eden
            graphs = sequence_to_eden(seqs)
            return graphs
        pre_processor_parameters = {}
        return pre_processor, pre_processor_parameters

    def vectorizer_init(self, n_iter):
        """Setup conversion of graphs to features."""
        vectorizer = Vectorizer()
        vectorizer_parameters = {'complexity': [1, 2]}
        return vectorizer, vectorizer_parameters

    def add_arguments(self, parser):
        """Add arguments for the main call."""
        parser.add_argument('--version', action='version', version='0.1')
        return parser

    def add_arguments_fit(self, parser):
        """Add arguments for the fit command."""
        parser.add_argument("-p", "--bound-file",
                            dest="positive_input_file",
                            help="Path to FASTA file containing sequences of bound sites.",
                            required=True)
        parser.add_argument("-n", "--unbound-file",
                            dest="negative_input_file",
                            help="Path to FASTA file containing sequences on unbound sites.",
                            required=True)
        return parser

    def add_arguments_estimate(self, parser):
        """Add arguments for the estimate command."""
        return self.add_arguments_fit(parser)
    
    def add_arguments_base(self, parser):
        parser.add_argument("-i", "--input-file",
                            dest="input_file",
                            help="Path to FASTA file containing input sequences.",
                            required=True)
        return parser

    def add_arguments_matrix(self, parser):
        """Add arguments used by the matrix command."""
        return parser

    def add_arguments_predict(self, parser):
        """Add arguments used by the predict command."""
        return parser

    def add_arguments_feature(self, parser):
        """Add arguments used by the feature command."""
        return parser


if __name__ == "__main__":
    model_initializer = ModelInitializer()
    main_script(model_initializer=model_initializer,
                description=DESCRIPTION,
                epilog=EPILOG,
                prog_name=os.path.basename(__file__),
                logger=logging.getLogger())